(function () {
  const KiaanVoiceOrb = {
    config: null,
    orb: null,
    panel: null,
    overlay: null,
    isDragging: false,
    startX: 0,
    startY: 0,
    orbSize: 64,
    currentMode: 'voice',
    conversation: null,
    messages: [],

    async init(options = {}) {
      this.config = await this.fetchConfig(options.configUrl || '/config.php');
      this.orb = document.getElementById('kiaanOrb');
      this.panel = document.getElementById('kiaanPanel');
      this.overlay = document.getElementById('kiaanOverlay');

      // Initialize position
      this.orb.style.left = `${window.innerWidth - this.orbSize - 16}px`;
      this.orb.style.top = `${window.innerHeight - this.orbSize - 16}px`;

      // Event listeners
      this.setupEventListeners();
      this.setupElevenLabs();
      this.renderModeContent();
    },

    async fetchConfig(url) {
      try {
        const response = await fetch(url, {
          headers: { Authorization: 'Bearer your-secure-token' }
        });
        return await response.json();
      } catch (error) {
        console.error('Config fetch error:', error);
        return {
          voiceAgentId: 'default-voice-agent',
          meetingAgentId: 'default-meeting-agent',
          webhookUrl: 'https://your-webhook-url.com'
        };
      }
    },

    setupEventListeners() {
      // Dragging
      this.orb.addEventListener('mousedown', this.startDragging.bind(this));
      this.orb.addEventListener('touchstart', this.startDragging.bind(this));
      document.addEventListener('mousemove', this.drag.bind(this));
      document.addEventListener('touchmove', this.drag.bind(this));
      document.addEventListener('mouseup', this.stopDragging.bind(this));
      document.addEventListener('touchend', this.stopDragging.bind(this));

      // Click to open panel
      this.orb.addEventListener('click', (e) => {
        if (!this.isDragging) this.togglePanel();
      });

      // Mode selection
      this.panel.querySelectorAll('.kiaan-mode-button').forEach(button => {
        button.addEventListener('click', () => {
          this.currentMode = button.dataset.mode;
          this.renderModeContent();
          this.updateModeButtons();
        });
      });

      // Prevent body scroll
      this.panel.addEventListener('transitionend', () => {
        document.body.style.overflow = this.panel.classList.contains('open') ? 'hidden' : '';
      });
    },

    startDragging(e) {
      e.preventDefault();
      this.isDragging = true;
      const clientX = e.type.includes('touch') ? e.touches[0].clientX : e.clientX;
      const clientY = e.type.includes('touch') ? e.touches[0].clientY : e.clientY;
      this.startX = clientX - parseFloat(this.orb.style.left || 0);
      this.startY = clientY - parseFloat(this.orb.style.top || 0);
    },

    drag(e) {
      if (!this.isDragging) return;
      e.preventDefault();
      const clientX = e.type.includes('touch') ? e.touches[0].clientX : e.clientX;
      const clientY = e.type.includes('touch') ? e.touches[0].clientY : e.clientY;

      let newX = clientX - this.startX;
      let newY = clientY - this.startY;

      newX = Math.max(0, Math.min(newX, window.innerWidth - this.orbSize));
      newY = Math.max(0, Math.min(newY, window.innerHeight - this.orbSize));

      this.orb.style.left = `${newX}px`;
      this.orb.style.top = `${newY}px`;
    },

    stopDragging() {
      this.isDragging = false;
    },

    togglePanel() {
      const isOpen = this.panel.classList.contains('open');
      this.panel.classList.toggle('open', !isOpen);
      this.overlay.classList.toggle('active', !isOpen);
      this.orb.classList.toggle('hidden', !isOpen);
    },

    setupElevenLabs() {
      const { useConversation } = window.ElevenLabs;
      this.conversation = useConversation({
        onMessage: (message) => {
          if (message.source === 'assistant' || message.source === 'ai') {
            this.messages = [...this.messages, { role: 'assistant', content: message.message }];
          } else if (message.source === 'user' && message.is_final) {
            this.messages = [...this.messages, { role: 'user', content: message.message }];
          }
          this.renderModeContent();
        },
        onError: (error) => console.error('Conversation error:', error),
        onConnect: () => console.log('Connected to ElevenLabs'),
        onDisconnect: () => console.log('Disconnected from ElevenLabs')
      });
    },

    async startVoiceSession() {
      try {
        this.messages = [];
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        stream.getTracks().forEach(track => track.stop());
        await this.conversation.startSession({
          agentId: this.currentMode === 'voice' ? this.config.voiceAgentId : this.config.meetingAgentId
        });
      } catch (error) {
        console.error('Error starting conversation:', error);
      }
    },

    async stopVoiceSession() {
      try {
        await this.conversation.endSession();
        this.messages = [];
        this.renderModeContent();
      } catch (error) {
        console.error('Error ending conversation:', error);
      }
    },

    async sendTextMessage(message, attachments = []) {
      const formData = new FormData();
      formData.append('message', message);
      attachments.forEach((file, index) => formData.append(`file_${index}`, file));

      try {
        const response = await fetch(this.config.webhookUrl, {
          method: 'POST',
          body: formData
        });
        const result = await response.json();
        this.messages = [...this.messages, { role: 'user', content: message }, { role: 'assistant', content: result.message || result.response }];
        this.renderModeContent();
      } catch (error) {
        console.error('Text chat error:', error);
      }
    },

    updateModeButtons() {
      this.panel.querySelectorAll('.kiaan-mode-button').forEach(button => {
        button.classList.toggle('active', button.dataset.mode === this.currentMode);
      });
    },

    renderModeContent() {
      const content = document.getElementById('kiaanModeContent');
      content.innerHTML = '';

      if (this.currentMode === 'voice' || this.currentMode === 'meeting') {
        content.innerHTML = `
          <div>
            <p>Status: ${this.conversation.status}</p>
            <p>Speaking: ${this.conversation.isSpeaking ? 'Yes' : 'No'}</p>
            <button onclick="KiaanVoiceOrb.startVoiceSession()">Start Conversation</button>
            <button onclick="KiaanVoiceOrb.stopVoiceSession()">Stop Conversation</button>
            <div class="messages">
              ${this.messages.map(msg => `<p><strong>${msg.role}:</strong> ${msg.content}</p>`).join('')}
            </div>
          </div>
        `;
      } else {
        content.innerHTML = `
          <div>
            <textarea id="textInput" placeholder="Type your message..."></textarea>
            <input type="file" id="fileInput" multiple accept=".pdf,.csv,.jpg,.png,.doc,.docx">
            <button onclick="KiaanVoiceOrb.sendTextMessage(document.getElementById('textInput').value, Array.from(document.getElementById('fileInput').files))">Send</button>
            <div class="messages">
              ${this.messages.map(msg => `<p><strong>${msg.role}:</strong> ${msg.content}</p>`).join('')}
            </div>
          </div>
        `;
      }
    }
  };

  window.KiaanVoiceOrb = KiaanVoiceOrb;
})();